import numpy, argparse, pandas, scipy
from helpers import helpers

# argument setup 
def comma_separated_levels(s):
    return [float(item) for item in s.split(',')]

parser = argparse.ArgumentParser()
parser.add_argument("--input_file", type=str, help="parquet file generated by variable_creation.py")
parser.add_argument('--levels', type=comma_separated_levels, help="A comma-separated list of levels to interpolate to, e.g. --levels 1.0,2.5,3.0")
parser.add_argument('--variables', type=str, nargs='+', help="A list of variables to interpolate, e.g. --variables temperature salinity")
parser.add_argument("--pressure_buffer", type=float, nargs='?', const=100.0, default=100.0, help="pressure range to keep on either side of the pressure ROI")
parser.add_argument("--pressure_index_buffer", type=int, nargs='?', const=5, default=5, help="minimum number of elements to preserve in the pressure buffer margins")
args = parser.parse_args()

# load data
df = pandas.read_parquet(args.input_file, engine='pyarrow')

# interpolate everything to specified levels
for var in args.variables:
    df[var] = df.apply(
        lambda row: helpers.interpolate_to_levels(row, var, args.levels),
        axis=1
    )

df['pressure'] = df.apply(
    lambda row: args.levels,
    axis=1
)

# drop any profiles where interpolation failed
df = df[~df.apply(lambda row: any(isinstance(row[col], int) and (row[col]==0xDEADBEEF) for col in args.variables), axis=1)]
df.reset_index(drop=True, inplace=True)

df.to_parquet(f"{args.input_file.split('.')[0]}_interpolated.parquet", engine='pyarrow')