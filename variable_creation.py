import numpy, argparse, glob, pandas, gsw
from helpers import helpers

# argument setup
parser = argparse.ArgumentParser()
parser.add_argument("--input_file", type=str, help="parquet file generated by upstream adaptor like argovis_input.py")
parser.add_argument("--output_file", type=str, help="name of output file, with path.")
parser.add_argument("--variable", type=str, help="variable to compute: one of absolute_salinity, potential_temperature, conservative_temperature, potential_density, or mld")
args = parser.parse_args()

df = pandas.read_parquet(args.input_file, engine='pyarrow')

if args.variable in ['absolute_salinity', 'potential_temperature', 'conservative_temperature', 'potential_density', 'mld']:
    df['absolute_salinity'] = df.apply(
        lambda row: gsw.conversions.SA_from_SP(
            row['salinity'], row['pressure'], row['longitude'], row['latitude']
        ),
        axis=1
    )

    df['absolute_salinity_qc'] = df.apply(
        lambda row: helpers.merge_qc([row['salinity_qc'], row['pressure_qc']]),
        axis=1
    )

if args.variable == 'potential_temperature':
    df['potential_temperature'] = df.apply(
        lambda row: gsw.conversions.pt0_from_t(
            row['absolute_salinity'], row['temperature'], row['pressure']
        ),
        axis=1
    )
    df['potential_temperature'] = df['potential_temperature'] + 273.15

    df['potential_temperature_qc'] = df.apply(
        lambda row: helpers.merge_qc([row['salinity_qc'], row['temperature_qc'], row['pressure_qc']]),
        axis=1
    )

if args.variable in ['conservative_temperature', 'potential_density', 'mld']:
    df['conservative_temperature'] = df.apply(
        lambda row: gsw.conversions.CT_from_t(
            row['absolute_salinity'], row['temperature'], row['pressure']
        ),
        axis=1
    )
    df['conservative_temperature'] = df['conservative_temperature'] + 273.15

    df['conservative_temperature_qc'] = df.apply(
        lambda row: helpers.merge_qc([row['salinity_qc'], row['temperature_qc'], row['pressure_qc']]),
        axis=1
    )

if args.variable in ['potential_density', 'mld']:
    df['potential_density'] = df.apply(
        lambda row: gsw.sigma0(
            row['absolute_salinity'], row['conservative_temperature']
        ),
        axis=1
    )

    df['potential_density_qc'] = df.apply(
        lambda row: helpers.merge_qc([row['salinity_qc'], row['temperature_qc'], row['pressure_qc']]),
        axis=1
    )

if args.variable == 'mld':
    df['mld'] = df.apply(
        lambda row: helpers.mld_estimator(row),
	axis=1
    )

    # abandon profiles for which we could not calculate a mld
    df = df[df['mld'].apply(lambda x: x != [None])].reset_index(drop=True)


    df['mld_qc'] = df.apply(
        lambda row: helpers.merge_qc([row['salinity_qc'], row['temperature_qc'], row['pressure_qc']]),
        axis=1
    )


df.to_parquet(args.output_file, engine='pyarrow')
