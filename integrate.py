import numpy, argparse, pandas, scipy
from helpers import helpers

def parse_pairs(s):
    return [float(x) for x in s.split(',')]

parser = argparse.ArgumentParser()
parser.add_argument("--input_file", type=str, help="parquet file generated by variable_creation.py")
parser.add_argument('--variables', type=str, nargs='+', help="A list of variables to interpolate, e.g. --variables temperature salinity")
parser.add_argument('--regions', type=parse_pairs, nargs='+', required=True,help='A list of integration regions denoted as min0,max0 min1,max1..., e.g. "--integration \'1,2 3,4 5,6\'"')
parser.add_argument("--pressure_buffer", type=float, nargs='?', const=100.0, default=100.0, help="pressure range to keep on either side of the pressure ROI")
parser.add_argument("--pressure_index_buffer", type=int, nargs='?', const=5, default=5, help="minimum number of elements to preserve in the pressure buffer margins")
args = parser.parse_args()

df = pandas.read_parquet(args.input_file, engine='pyarrow')

pressure_comb = helpers.integration_comb(args.regions)

# interpolate everything to specified levels
for var in args.variables:
    df[[var, 'flag']] = df.apply(
        lambda row: pandas.Series(helpers.interpolate_to_levels(row, var, pressure_comb)),
        axis=1
    )

df['pressure'] = df.apply(
    lambda row: pressure_comb,
    axis=1
)

# integrate over regions
for var in args.variables:
    df[var+'_integration'] = df.apply(
        lambda row: helpers.integration_regions(args.regions, row['pressure'], row[var]),
        axis=1
    )

df['integration_regions'] = df.apply(
    lambda row: args.regions,
    axis=1
)

# combs can be huge, drop them.
df = df.drop(columns=args.variables + ['pressure'])

df.to_parquet(f"{args.input_file.split('.')[0]}_integrated.parquet", engine='pyarrow')
